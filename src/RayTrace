/**
 * @file RayTrace.h
 * @brief Defines the a point class for point operations.
 */
#ifndef RAYTRACE_H
#define RAYTRACE_H

#include "ray.h"
#include "Hit.h"
#include "object.h"
#include "gmath.h"
#include <vector>
#include <string>

using namespace std;

class RayTrace
{
public:
    vector<Hit> Path;
    ray SourceRay;
    // constructor
    RayTrace(ray r)
    {
        SourceRay = r;
    }
    // trace the path and keeps track
    bool trace(size_t Bounce, const vector<object> *objects)
    {
        if (Bounce == 0 || Bounce > 100)
        {
            std::string temp = std::to_string(Bounce) + " Bounce value invalid";
            throw temp;
        }

        for (size_t i = 0; i < Bounce; i++)
        {
            ray newRay;
            size_t index = indexOfTheClosestObject(objects, newRay);
        }
    }

    size_t indexOfTheClosestObject(const vector<object> *objects, ray currentRay)
    {
        if (objects->size() <= 0)
        {
            throw "const vector<object> *objects sixze() negative or equal to 0 :" + std::to_string(objects->size());
        }
        else
        {
            int distance = -1;
            int index = -1;
            // iterate over the objects
            for (size_t i = 0; i < objects->size(); i++)
            {
                // iterate over the rows of verticies within the object
                for (size_t j = 0; j < objects->at(i).vertices.size(); j++)
                {
                    vector<point> tempVec = objects->at(i).vertices.at(j);
                    // iterate over every verticies of every row
                    // and calcualte the closest one to the ray origine
                    for (size_t z = 0; z < tempVec.size(); z++)
                    {
                        double newDistance = gmath::distance(currentRay.getOrigine(), tempVec.at(z));
                        if ((distance == -1 && i == 0) || distance < newDistance)
                        {
                            distance = newDistance;
                            index = i;
                        }
                        else
                        {
                            continue;
                        }
                    }
                }
            }
        }
    }
};

#endif // POINT_H